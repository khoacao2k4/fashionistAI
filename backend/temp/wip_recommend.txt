@app.route('/recommend', methods=['POST'])
def recommend():
    """Endpoint for fetching fashion recommendations."""
    data = request.json

    # Extract input parameters from the request
    # Call the get_all() function to fetch all clothes data
    clothes = []
    clothes_without_img = []
    clothes_cursor = db.clothes.find()
    for item in clothes_cursor:    # Append document with image_id and metadata to the list
        image_id = item.get("image")  # Get the GridFS image ID
        image_file = fs.get(image_id)  # Fetch the image from GridFS

        # Convert the image to a base64 string
        image_base64 = base64.b64encode(image_file.read()).decode('utf-8')
        cloth_info = {
            "id": str(item.get("_id")),  # Convert ObjectId to string
            "subCategory": item.get("subCategory"),
            "article": item.get("article"),
            "gender": item.get("gender"),
            "baseColour": item.get("baseColour"),
            "season": item.get("season"),
            "usage": item.get("usage")
        }
        clothes_without_img.append(cloth_info)
        cloth_info["image"] = image_base64
        # Append document with image_id and metadata to the list
        clothes.append(cloth_info)
    occasion = data.get('occasion')
    n = data.get('n', 5)  # Default to 5 recommendations

    if not clothes or not occasion:
        return jsonify({"error": "Missing required parameters: clothes and occasion."}), 400
    # Fetch recommendations
    result = recommender.recommend(clothes=clothes_without_img, occasion=occasion, n=n)
    print(result)
    final_clothes = []
    for rec in result["recommendations"]:
        for cloth in clothes:
            if rec["id"] == cloth["id"]:
                cloth["description"] = rec["description"]
                final_clothes.append(cloth)
    return jsonify(final_clothes)